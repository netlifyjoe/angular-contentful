{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { createClient } from 'contentful';\nimport { StackbitService } from './stackbit.service';\nimport { environment } from './../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./stackbit.service\"; // change these to include your own settings\n\nconst DEFAULT_CONFIG = {\n  credentials: {\n    space: environment.contentfulSpaceId,\n    accessToken: isDevMode ? environment.contentfulPreviewToken : environment.contentfulDeliveryToken\n  },\n  contentTypeIds: {\n    product: 'product',\n    category: 'category'\n  }\n};\nexport let ContentfulService = /*#__PURE__*/(() => {\n  class ContentfulService {\n    constructor(stackbitService) {\n      this.stackbitService = stackbitService;\n\n      try {\n        this.config = JSON.parse(localStorage.catalogConfig);\n      } catch (e) {\n        this.config = DEFAULT_CONFIG.credentials;\n      }\n\n      this.titleHandlers = [];\n\n      this._createClient();\n\n      this.getSpace();\n    }\n\n    onTitleChange(fn) {\n      this.titleHandlers.push(fn);\n    } // get the current space\n\n\n    getSpace() {\n      return this.cdaClient.getSpace().then(space => {\n        this.titleHandlers.forEach(handler => handler(space.name));\n        return space;\n      });\n    } // fetch products\n\n\n    getProductsFromContentful(query) {\n      return this.cdaClient.getEntries(Object.assign({\n        content_type: DEFAULT_CONFIG.contentTypeIds.product\n      }, query)).then(res => res.items);\n    }\n\n    getProducts(query) {\n      const productsSubject = new BehaviorSubject(this.getProductsFromContentful(query));\n      this.stackbitService.contentChanged.subscribe({\n        next: event => {\n          if (event.changedContentTypes.includes(DEFAULT_CONFIG.contentTypeIds.product)) {\n            productsSubject.next(this.getProductsFromContentful(query));\n          }\n        }\n      });\n      return productsSubject;\n    } // fetch products with a given slug\n    // and return one of them\n\n\n    getProductFromContentful(slug) {\n      return this.getProductsFromContentful({\n        'fields.slug': slug\n      }).then(items => items[0]);\n    }\n\n    getProduct(slug) {\n      const productSubject = new BehaviorSubject(this.getProductFromContentful(slug));\n      this.stackbitService.contentChanged.subscribe({\n        next: event => {\n          if (event.changedContentTypes.includes(DEFAULT_CONFIG.contentTypeIds.product)) {\n            productSubject.next(this.getProductFromContentful(slug));\n          }\n        }\n      });\n      return productSubject;\n    } // fetch categories\n\n\n    getCategories() {\n      return this.cdaClient.getEntries({\n        content_type: DEFAULT_CONFIG.contentTypeIds.category\n      }).then(res => res.items);\n    } // return a custom config if available\n\n\n    getConfig() {\n      return this.config !== DEFAULT_CONFIG.credentials ? Object.assign({}, this.config) : {\n        space: '',\n        accessToken: ''\n      };\n    } // set a new config and store it in localStorage\n\n\n    setConfig(config) {\n      localStorage.setItem('catalogConfig', JSON.stringify(config));\n      this.config = config;\n\n      this._createClient();\n\n      this.getSpace();\n      return Object.assign({}, this.config);\n    } // set config back to default values\n\n\n    resetConfig() {\n      localStorage.removeItem('catalogConfig');\n      this.config = DEFAULT_CONFIG.credentials;\n\n      this._createClient();\n\n      this.getSpace();\n      return Object.assign({}, this.config);\n    }\n\n    _createClient() {\n      this.cdaClient = createClient({\n        space: this.config.space,\n        accessToken: this.config.accessToken,\n        host: isDevMode ? 'preview.contentful.com' : 'cdn.contentful.com'\n      });\n    }\n\n  }\n\n  ContentfulService.ɵfac = function ContentfulService_Factory(t) {\n    return new (t || ContentfulService)(i0.ɵɵinject(i1.StackbitService));\n  };\n\n  ContentfulService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContentfulService,\n    factory: ContentfulService.ɵfac\n  });\n  return ContentfulService;\n})();","map":null,"metadata":{},"sourceType":"module"}